// Add this code to onBulletHitEnemy after an enemy is destroyed:
// Increment enemy defeat counter for test stats if the enemy was destroyed
if (destroyed && this.registry.get('buildModeTest') === true) {
  const currentDefeats = this.registry.get('enemiesDefeated') || 0;
  this.registry.set('enemiesDefeated', currentDefeats + 1);
  console.log(`[StarshipScene] Test mode: Enemy defeated (total: ${currentDefeats + 1})`);
}

// Add this code to onPlayerHit after "No shield, starting game over sequence" log:
// Track player deaths for test mode
if (this.registry.get('buildModeTest') === true) {
  const currentDeaths = this.registry.get('playerDeaths') || 0;
  this.registry.set('playerDeaths', currentDeaths + 1);
  console.log(`[StarshipScene] Test mode: Player death recorded (total: ${currentDeaths + 1})`);
}

// Add this code in the powerup collection handler after activating a powerup:
// Track powerup collection for test mode
if (this.registry.get('buildModeTest') === true) {
  const currentPowerups = this.registry.get('powerupsCollected') || 0;
  this.registry.set('powerupsCollected', currentPowerups + 1);
  console.log(`[StarshipScene] Test mode: Powerup collected (total: ${currentPowerups + 1})`);
}

// Add this code in the create method where test mode is detected:
// Initialize test stats in registry
this.registry.set('enemiesDefeated', 0);
this.registry.set('playerDeaths', 0);
this.registry.set('powerupsCollected', 0);

// Make sure these methods exist at the end of the class:
/**
 * Handle test stop event from TestStep
 */
private handleTestStop(): void {
  console.log('[StarshipScene] Received test stop event');
  
  // Send final statistics to the BuildMode scene
  this.sendTestStats();
  
  // Signal that the test is complete
  this.events.emit('test:completed');
}

/**
 * Send current test statistics back to the BuildMode scene
 */
private sendTestStats(): void {
  if (this.registry.get('buildModeTest') !== true) {
    return;
  }
  
  // Compile statistics
  const stats = {
    score: this.score,
    enemiesDefeated: this.registry.get('enemiesDefeated') || 0,
    playerDeaths: this.registry.get('playerDeaths') || 0,
    powerupsCollected: this.registry.get('powerupsCollected') || 0
  };
  
  console.log('[StarshipScene] Sending test stats:', stats);
  
  // Send stats to the parent scene
  this.scene.get('BuildModeScene').events.emit('test:stats', stats);
}
